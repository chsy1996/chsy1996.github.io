<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>我对Linux的理解</title>
    <link href="/2020/03/15/linux/"/>
    <url>/2020/03/15/linux/</url>
    
    <content type="html"><![CDATA[<h1 id="一、概观"><a href="#一、概观" class="headerlink" title="一、概观"></a>一、概观</h1><h3 id="1-1-Linux系统中的抽象级别和层次"><a href="#1-1-Linux系统中的抽象级别和层次" class="headerlink" title="1.1 Linux系统中的抽象级别和层次"></a>1.1 Linux系统中的抽象级别和层次</h3><blockquote><p>linux操作系统处于计算机底层硬件和应用程序之间。</p><p>而linux操作系统自身又可以分为三个层次：</p><ul><li><strong>用户进程</strong><br>计算机中运行的所有程序。</li><li><strong>内核</strong><br>运行在内存中，负责向CPU发送指令，是硬件系统与应用程序之间的通信接口。</li><li><strong>硬件系统</strong><br>包括中央处理器（CPU），主内存（RAM），硬盘，网络端口</li></ul></blockquote><h3 id="1-2-硬件系统中的主内存"><a href="#1-2-硬件系统中的主内存" class="headerlink" title="1.2 硬件系统中的主内存"></a>1.2 硬件系统中的<strong>主内存</strong></h3><blockquote><p>主要是用来存储（二进制）数据，并且与外部设备进行输入输出的交互。</p><p>state状态就是一组特定排列的比特（每个0和1称为一个比特bit),通常会用抽象词汇来描述，比如映像表示比特值在内存中的特定物理排列。</p></blockquote><h3 id="1-3-内核"><a href="#1-3-内核" class="headerlink" title="1.3 内核"></a>1.3 内核</h3><blockquote><p><strong>内核的作用</strong><br><img src="/img/kerneltask.jpg" srcset="/img/loading.gif" alt=""></p><ul><li><p><strong>进程管理</strong></p><ul><li>控制进程的启动、暂停、恢复和终止</li><li>以及在这个过程中如何使用CPU：<em>上下文切换</em>–进程间固定时间轮流交替CPU使用权，所以内核就是在上下文切换的时间段间隙中运行的</li></ul></li><li><p><strong>内存管理</strong></p><ul><li>内核在上下文管理中对内存进行管理，要保证以下条件：<ul><li>内核有专有内存空间，且其他用户进程不能访问</li><li>每个进程有其专有内存空间，且其他进程不能访问</li><li>用户进程之间可以共享内存</li><li>用户进程的某些内存空间为只读</li><li>通过使用磁盘交换，系统可以使用比实际内存容量更多的内存空间</li></ul></li><li>新的CPU提供了MMU（Memory Management Unit， 内存管理单元），其使用了<em>虚拟内存</em>的访问机制，进程不直接访问内存的实际物理地址，而是通过MMU中的内存映射表将要访问的内存地址转化为实际的物理地址。这个地址映射表被内核初始化，维护和更新。</li></ul></li><li><p><strong>设备驱动程序和设备管理</strong></p></li><li><p><strong>系统调用和系统支持</strong></p><ul><li>打开、读取和写文件等操作都设计系统调用。<ul><li>fork()： 内核创建一个和该进程一样的副本</li><li>exec()： 进程调用exec(program)时，内核启动program来替换当前进程</li></ul></li></ul></li></ul></blockquote><h3 id="1-4-用户空间"><a href="#1-4-用户空间" class="headerlink" title="1.4 用户空间"></a>1.4 用户空间</h3><blockquote><p>  用户空间即内核分配给用户进程的内存。<br>  内核角度看所有进程都一样。但从执行任务来看，用户进程位于三个层次中：<br>    - 基础服务层<br>    - 工具服务层<br>    - 应用程序层</p></blockquote><h3 id="1-5-用户"><a href="#1-5-用户" class="headerlink" title="1.5 用户"></a>1.5 用户</h3><blockquote><p>  一个用户代表一个实体，有权运行用户进程，对文件拥有所有权，有一个用户名。主要用于<em>权限管理</em>。</p></blockquote><h1 id="二、-基础命令和目录结构"><a href="#二、-基础命令和目录结构" class="headerlink" title="二、 基础命令和目录结构"></a>二、 基础命令和目录结构</h1><h3 id="本章内容"><a href="#本章内容" class="headerlink" title="本章内容"></a><strong>本章内容</strong></h3><p>  Unix系统的命令和工具</p><h3 id="2-1-Bourne-shell-bin-sh"><a href="#2-1-Bourne-shell-bin-sh" class="headerlink" title="2.1 Bourne shell: /bin/sh"></a>2.1 <strong>Bourne shell: /bin/sh</strong></h3><blockquote><p><strong><em>shell:</em></strong> 即命令行界面，是运行命令行的应用程序<br><strong><em>命令行:</em></strong>是用户输入的命令。<br><strong><em>Bourne shell:</em></strong>贝尔实验室开发的Unix标准shell， Linux则使用了一个增强版本的Bourne shell，又称bash或“Bourne-again” shell。</p></blockquote><h3 id="2-2-如何使用shell"><a href="#2-2-如何使用shell" class="headerlink" title="2.2 如何使用shell"></a>2.2 <strong>如何使用shell</strong></h3><blockquote><p>shell窗口</p></blockquote><h1 id="设备管理"><a href="#设备管理" class="headerlink" title="设备管理"></a>设备管理</h1><h1 id="硬盘和文件系统"><a href="#硬盘和文件系统" class="headerlink" title="硬盘和文件系统"></a>硬盘和文件系统</h1><h1 id="Linux内核的启动"><a href="#Linux内核的启动" class="headerlink" title="Linux内核的启动"></a>Linux内核的启动</h1><h1 id="用户空间的启动"><a href="#用户空间的启动" class="headerlink" title="用户空间的启动"></a>用户空间的启动</h1><h1 id="系统配置：日志、系统时间、批处理任务和用户"><a href="#系统配置：日志、系统时间、批处理任务和用户" class="headerlink" title="系统配置：日志、系统时间、批处理任务和用户"></a>系统配置：日志、系统时间、批处理任务和用户</h1><h1 id="进程与资源利用详解"><a href="#进程与资源利用详解" class="headerlink" title="进程与资源利用详解"></a>进程与资源利用详解</h1><h1 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h1><h1 id="网络应用与服务"><a href="#网络应用与服务" class="headerlink" title="网络应用与服务"></a>网络应用与服务</h1><h1 id="shell脚本"><a href="#shell脚本" class="headerlink" title="shell脚本"></a>shell脚本</h1><h1 id="在网络上传输文件"><a href="#在网络上传输文件" class="headerlink" title="在网络上传输文件"></a>在网络上传输文件</h1><h1 id="Linux桌面概览"><a href="#Linux桌面概览" class="headerlink" title="Linux桌面概览"></a>Linux桌面概览</h1><h1 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h1><h1 id="从c代码编译出软件"><a href="#从c代码编译出软件" class="headerlink" title="从c代码编译出软件"></a>从c代码编译出软件</h1><h1 id="在基础上搭建"><a href="#在基础上搭建" class="headerlink" title="在基础上搭建"></a>在基础上搭建</h1>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>How to Read Code?</title>
    <link href="/2020/03/13/readcode/"/>
    <url>/2020/03/13/readcode/</url>
    
    <content type="html"><![CDATA[<h1 id="一"><a href="#一" class="headerlink" title="一"></a>一</h1><ul><li>从后往前读  </li><li>多读好代码  </li></ul><h1 id="二-top-down-amp-amp-bottom-up"><a href="#二-top-down-amp-amp-bottom-up" class="headerlink" title="二 top-down &amp;&amp; bottom-up"></a>二 top-down &amp;&amp; bottom-up</h1><ul><li><p><strong><em>top-down</em></strong>模式：<br>静态跟着代码看，或者用debugger看，每次出现函数调用就记录下函数的执行层次，比如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">func1()  </span><br><span class="line">  func2()  </span><br><span class="line">    func()  </span><br><span class="line">  func3()</span><br></pre></td></tr></table></figure><p>自己可以根据需要增加信息</p></li><li><p><strong><em>bottom-up</em></strong>模式<br>一直深入到最底层，给能了解作用的底层函数一个个的写文档，这个文档是完全底层的观点。</p></li><li><p>模式间不停的转换和细化</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>methodology</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Vim实用技巧</title>
    <link href="/2020/03/08/Vim%E5%AE%9E%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    <url>/2020/03/08/Vim%E5%AE%9E%E7%94%A8%E6%8A%80%E5%B7%A7/</url>
    
    <content type="html"><![CDATA[<h1 id="第一章-Vim解决问题的方式"><a href="#第一章-Vim解决问题的方式" class="headerlink" title="第一章 Vim解决问题的方式"></a>第一章 Vim解决问题的方式</h1><p>  Vim对重复性操作进行优化，它会记录我们最近的操作，让我们用一次按键就能重复上的修改。</p><ol><li>认识.命令（重复上次的修改）<ul><li>普通模式 下的修改(i.e. x, dd)</li><li>插入模式 </li></ul></li><li>不要自我重复<ul><li>普通模式 A字符相当于$a, vim中有很多这样的命令</li></ul></li><li><h2 id="以退为进"><a href="#以退为进" class="headerlink" title="以退为进"></a>以退为进</h2></li></ol>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>computer science</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2020/03/08/hello-world/"/>
    <url>/2020/03/08/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
